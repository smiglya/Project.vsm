# Source Generated with Decompyle++
# File: test_calculations.cpython-312.pyc (Python 3.12)

'''
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤.
'''
from datetime import date, timedelta
from django.core.management.base import BaseCommand
from django.utils import timezone
from apps.mileage_calculator.models import Train, TrainDailyRecord, Depot
from apps.mileage_calculator.services.calculation_service import MileageCalculationService
from apps.mileage_calculator.services.analytics_service import AnalyticsService
from tasks import recalculate_train_metrics, generate_maintenance_alerts

class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–æ–±–µ–≥–∞'
    
    def add_arguments(self, parser):
        parser.add_argument('--train-id', type=int, help='ID –ø–æ–µ–∑–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π)')
        parser.add_argument('--depot-id', type=int, help='ID –¥–µ–ø–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
        parser.add_argument('--test-analytics', action='store_true', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã')
        parser.add_argument('--test-tasks', action='store_true', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Celery –∑–∞–¥–∞—á–∏')

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üßÆ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤'))
        
        train_id = options.get('train_id')
        try:
            if train_id:
                train = Train.objects.get(id=train_id)
            else:
                train = Train.objects.first()
                if not train:
                    self.stdout.write(self.style.ERROR('–ü–æ–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'))
                    return
                    
            self.stdout.write(f'–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–µ–∑–¥: {train.name} ({train.train_type})')
            
            latest_record = TrainDailyRecord.objects.filter(train=train).order_by('-record_date').first()
            if not latest_record:
                self.stdout.write(self.style.ERROR(f'–ó–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–µ–∑–¥–∞ {train.name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'))
                return
                
            self.test_calculation_service(train, latest_record)
            
            if options['test_analytics']:
                self.test_analytics_service(train, options.get('depot_id'))
                
            # –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery –∑–∞–¥–∞—á
            # if options['test_tasks']:
            #     self.test_celery_tasks(train)
                
        except Train.DoesNotExist:
            self.stdout.write(self.style.ERROR(f'–ü–æ–µ–∑–¥ —Å ID {train_id} –Ω–µ –Ω–∞–π–¥–µ–Ω'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'–û—à–∏–±–∫–∞: {str(e)}'))

    def test_calculation_service(self, train, record):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å—á–µ—Ç–æ–≤."""
        self.stdout.write('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MileageCalculationService:')
        
        try:
            metrics = MileageCalculationService.calculate_all_metrics(record)
            self.stdout.write(f'  ‚úÖ –û–±—â–∏–π –ø—Ä–æ–±–µ–≥: {metrics.get("total_mileage", "N/A"):,} –∫–º')
            self.stdout.write(f'  ‚úÖ –°—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–±–µ–≥: {metrics.get("daily_mileage", "N/A")} –∫–º')
            self.stdout.write(f'  ‚úÖ –ü—Ä–æ–±–µ–≥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û: {metrics.get("mileage_since_to", "N/A")} –∫–º')
            self.stdout.write(f'  ‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ –¢–û: {metrics.get("mileage_to_to", "N/A")} –∫–º')
            self.stdout.write(f'  ‚úÖ –î–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û: {metrics.get("days_since_to", "N/A")}')
            self.stdout.write(f'  ‚úÖ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–≥: {metrics.get("avg_mileage", "N/A")} –∫–º/–¥–µ–Ω—å')
            
            planned_date = metrics.get('planned_to_date')
            if planned_date:
                self.stdout.write(f'  ‚úÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –¢–û: {planned_date}')
            else:
                self.stdout.write('  ‚ö†Ô∏è  –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –¢–û: –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞')
                
            indicator_color = metrics.get('indicator_color')
            if indicator_color:
                self.stdout.write(f'  üî¥ –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è: {indicator_color}')
            else:
                self.stdout.write('  üü¢ –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è: –Ω–æ—Ä–º–∞–ª—å–Ω–æ')
                
            if train.type == '–°–∞–ø—Å–∞–Ω':
                self.stdout.write('\nüöÑ –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –°–∞–ø—Å–∞–Ω–∞:')
                sapsan_metrics = {
                    'mileage_from_to_l': MileageCalculationService.calculate_sapsan_mileage_from_to_l(record),
                    'mileage_to_to_l': MileageCalculationService.calculate_sapsan_mileage_to_to_l(record),
                    'mileage_to_to_n': MileageCalculationService.calculate_sapsan_mileage_to_to_n(record) }
                for key, value in sapsan_metrics.items():
                    '  ‚úÖ '(f'''{key}: {value if value else 'N/A'}''')
                if self.stdout.write:
                    pass
            self.stdout.write('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:')
            end_date = date.today()
            start_date = end_date - timedelta(days = 7)
            updated_count = MileageCalculationService.bulk_calculate_for_train(train, start_date, end_date)
            self.stdout.write(f'''  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_count}''')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö: {str(e)}'))

    def test_analytics_service(self, train, depot_id=None):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞."""
        self.stdout.write('\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AnalyticsService:')
        
        try:
            prediction = AnalyticsService.predict_maintenance_date(train)
            if 'error' in prediction:
                self.stdout.write(f'  ‚ö†Ô∏è  –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–û: {prediction["error"]}')
            else:
                self.stdout.write(f'  ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –¢–û: {prediction["predicted_date"]}')
                
            if not depot_id:
                depot_id = train.depot.id
                
            depot_stats = AnalyticsService.get_depot_statistics(depot_id)
            self.stdout.write(f'\nüè≠ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–ø–æ {depot_stats["depot_id"]}:')
            self.stdout.write(f'  üöÇ –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–≤: {depot_stats["total_trains"]}')
            self.stdout.write(f'  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–≤: {depot_stats["active_trains"]}')
            
            agg_stats = depot_stats['aggregated_stats']
            if not agg_stats['total_mileage'] or agg_stats['total_mileage']:
                '  üìä –û–±—â–∏–π –ø—Ä–æ–±–µ–≥: '
            None(f'''{0:,} –∫–º''')
            if not agg_stats['avg_daily_mileage'] or agg_stats['avg_daily_mileage']:
                '  üìä –°—Ä–µ–¥–Ω–∏–π —Å—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–±–µ–≥: '
            None(f'''{0:.2f} –∫–º''')
            
            maintenance = depot_stats['maintenance_analysis']
            self.stdout.write(f'''  üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–æ –¥–Ω—è–º: {maintenance['days_analysis']['critical']}''')
            self.stdout.write(f'''  üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ –¥–Ω—è–º: {maintenance['days_analysis']['warning']}''')
            self.stdout.write(f'''  üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–æ –ø—Ä–æ–±–µ–≥—É: {maintenance['mileage_analysis']['critical']}''')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}'))

    def test_celery_tasks(self, train):
        '''–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery –∑–∞–¥–∞—á.'''
        self.stdout.write('\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery –∑–∞–¥–∞—á:')
        end_date = date.today()
        start_date = end_date - timedelta(days = 7)
        task_result = recalculate_train_metrics.delay(train.id, start_date.isoformat(), end_date.isoformat())
        self.stdout.write(f'''  ‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞: {task_result.id}''')
        result = task_result.get(timeout = 30)
        if 'error' in result:
            self.stdout.write(f'''  ‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {result['error']}''')
        else:
            self.stdout.write(f'''  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result['updated_count']}''')
        alerts_task = generate_maintenance_alerts.delay()
        self.stdout.write(f'''  ‚úÖ –ó–∞–¥–∞—á–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞: {alerts_task.id}''')
        alerts_result = alerts_task.get(timeout = 15)
        total_alerts = alerts_result.get('total_alerts', 0)
        self.stdout.write(f'''  üì¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {total_alerts}''')
        if alerts_result.get('alerts'):
            self.stdout.write('  üìã –ü—Ä–∏–º–µ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:')
            # if 3:  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ
            for alert in 3:
                self.stdout.write(f'''    ‚Ä¢ {alert['message']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {alert['priority']})''')
            # if None:  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ
        self.stdout.write(self.style.SUCCESS('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!'))
        return None
        # if None:  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ
        try:
            e = None
            self.stdout.write(f'''  ‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏: {e}''')
            e = None
            del e
            continue
            e = None
            del e
            if alerts_result['alerts'] and alerts_result['alerts']:
                pass
        if alerts_result['alerts'] and alerts_result['alerts'] and alerts_result['alerts']:
            pass
        try:
            e = alerts_result['alerts']
            self.stdout.write(f'''  ‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}''')
            e = None
            del e
            continue
            e = None
            del e
            except Exception as e:
        pass
        except Exception as e:
        pass


